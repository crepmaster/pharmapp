import 'package:cloud_firestore/cloud_firestore.dart';
import '../models/subscription.dart';

/// Service for creating subscriptions during pharmacy registration
class SubscriptionCreationService {
  static final FirebaseFirestore _firestore = FirebaseFirestore.instance;

  /// Create a 30-day trial subscription for a new pharmacy
  static Future<void> createTrialSubscription(
    String pharmacyId, {
    String currency = 'XAF',
  }) async {
    try {
      final now = DateTime.now();
      final trialEnd = now.add(const Duration(days: 30));

      final subscription = Subscription(
        id: '', // Will be auto-generated by Firestore
        pharmacyId: pharmacyId,
        plan: SubscriptionPlan.basic,
        planConfigId: null,
        status: SubscriptionStatus.trial,
        amount: 0.0, // Trial is free
        currency: currency,
        startDate: now,
        endDate: trialEnd, // Trial ends in 30 days
        trialEndDate: trialEnd,
        isYearly: false,
        createdAt: now,
        activatedAt: now, // Activated immediately
        suspendedAt: null,
        paymentReference: 'TRIAL_30_DAYS',
        adminUserId: null,
        adminNotes: 'Automatic 30-day trial subscription created during registration',
        features: Subscription.getPlanFeatures(SubscriptionPlan.basic),
      );

      // Create subscription document
      await _firestore.collection('subscriptions').add(subscription.toMap());

      print('✅ Created 30-day trial subscription for pharmacy: $pharmacyId');
    } catch (e) {
      print('❌ Error creating trial subscription: $e');
      // Don't throw - we don't want to block registration if subscription creation fails
      // The pharmacy can still use the app and we can create subscription later
    }
  }

  /// Check if pharmacy already has a subscription
  static Future<bool> hasSubscription(String pharmacyId) async {
    try {
      final snapshot = await _firestore
          .collection('subscriptions')
          .where('pharmacyId', isEqualTo: pharmacyId)
          .limit(1)
          .get();

      return snapshot.docs.isNotEmpty;
    } catch (e) {
      print('Error checking subscription: $e');
      return false;
    }
  }

  /// Create subscription only if pharmacy doesn't have one
  static Future<void> ensureTrialSubscription(String pharmacyId) async {
    final hasExisting = await hasSubscription(pharmacyId);
    if (!hasExisting) {
      await createTrialSubscription(pharmacyId);
    } else {
      print('Pharmacy $pharmacyId already has a subscription');
    }
  }
}
