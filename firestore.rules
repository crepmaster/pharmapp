rules_version = '2';
service cloud.firestore {
  match /databases/{db}/documents {
    function isAdmin() { return request.auth.token.role == 'admin'; }
    function isAuthenticated() { return request.auth != null; }
    function isOwner(userId) { return request.auth != null && request.auth.uid == userId; }
    
    // ðŸ”’ SUBSCRIPTION SECURITY FUNCTIONS (UPDATED FOR AFRICAN MARKETS)
    function hasActiveSubscription(userId) {
      let pharmacy = get(/databases/$(database)/documents/pharmacies/$(userId));
      return pharmacy != null && 
             pharmacy.data.hasActiveSubscription == true &&
             (
               // Active subscription
               (pharmacy.data.subscriptionStatus == 'active' &&
                pharmacy.data.subscriptionEndDate > request.time) ||
               // Trial subscription (NEW for African markets)
               (pharmacy.data.subscriptionStatus == 'trial' &&
                (pharmacy.data.subscriptionEndDate == null || 
                 pharmacy.data.subscriptionEndDate > request.time))
             );
    }
    
    function getSubscriptionPlan(userId) {
      let pharmacy = get(/databases/$(database)/documents/pharmacies/$(userId));
      return pharmacy != null ? pharmacy.data.subscriptionPlan : null;
    }
    
    function canCreateInventory(userId, inventoryCount) {
      let plan = getSubscriptionPlan(userId);
      return hasActiveSubscription(userId) && (
        plan == 'basic' && inventoryCount < 100 ||
        plan == 'professional' ||  // Unlimited
        plan == 'enterprise'       // Unlimited
      );
    }
    
    function canCreateProposal(userId) {
      return hasActiveSubscription(userId);
    }

    // Backend-only collections (write restricted to cloud functions)
    match /webhook_logs/{id} { allow write: if false; allow read: if isAdmin(); }
    match /payments/{id}     { allow write: if false; allow read: if isAdmin(); }
    match /ledger/{id}       { allow write: if false; allow read: if isAdmin(); }
    match /wallets/{userId}  { 
      allow read: if isAuthenticated() && (isOwner(userId) || isAdmin());
      allow write: if false; // Backend-only writes
    }
    match /exchanges/{id}    { allow write: if false; allow read: if isAdmin() || isAuthenticated(); }
    match /idempotency/{id}  { allow write: if false; allow read: if isAdmin(); }

    // ðŸ”’ CRITICAL: Subscription collections (SECURE - BACKEND ONLY)
    match /subscriptions/{subscriptionId} {
      allow read: if isAuthenticated() && 
        (get(/databases/$(database)/documents/subscriptions/$(subscriptionId)).data.pharmacyId == request.auth.uid ||
         isSuperAdmin(request.auth.uid));
      allow write: if false; // Only backend functions can write subscription data
    }
    
    match /subscription_payments/{paymentId} {
      allow read: if isAuthenticated() && 
        (get(/databases/$(database)/documents/subscription_payments/$(paymentId)).data.pharmacyId == request.auth.uid ||
         isSuperAdmin(request.auth.uid));
      allow write: if false; // Only payment webhooks can write payment data
    }
    
    match /subscription_config/{configId} {
      allow read: if isAuthenticated(); // Plan configurations are public
      allow write: if isSuperAdmin(request.auth.uid); // Only super admin can modify plans
    }
    
    match /subscription_audit/{auditId} {
      allow read: if isSuperAdmin(request.auth.uid); // Only admin can read audit logs
      allow write: if false; // Only backend functions can write audit logs
    }

    // Admin collection (secure authentication-based access)
    match /admins/{userId} {
      allow read: if isAuthenticated() && request.auth.uid == userId; // Admin can read own data
      allow read: if isAuthenticated() && isSuperAdmin(request.auth.uid); // Super admin can read all
      allow write: if false; // Only cloud functions or admin SDK should write admin data
    }
    
    // Helper function to check if user is super admin
    function isSuperAdmin(userId) {
      return exists(/databases/$(database)/documents/admins/$(userId)) &&
             get(/databases/$(database)/documents/admins/$(userId)).data.role == 'super_admin';
    }

    // Mobile app collections
    match /pharmacies/{userId} {
      allow read: if isAuthenticated(); // Other pharmacies can read basic profile info
      allow create: if isOwner(userId) && isValidPharmacyData(request.resource.data);
      allow update: if isOwner(userId) && isValidPharmacyData(request.resource.data);
      allow delete: if isOwner(userId);
    }
    
    // Pharmacy data validation function
    function isValidPharmacyData(data) {
      return data.keys().hasAll(['email', 'pharmacyName', 'phoneNumber', 'address', 'role']) &&
             data.role == 'pharmacy' &&
             data.email is string &&
             data.pharmacyName is string &&
             data.phoneNumber is string &&
             data.address is string &&
             data.isActive is bool &&
             // Subscription fields are optional during creation but if present must be valid
             (!data.keys().hasAny(['hasActiveSubscription']) || data.hasActiveSubscription is bool) &&
             (!data.keys().hasAny(['subscriptionStatus']) || data.subscriptionStatus is string) &&
             // Location data is optional but if present must be valid
             (!data.keys().hasAny(['locationData']) || isValidLocationData(data.locationData));
    }
    
    // Location data validation function
    function isValidLocationData(locationData) {
      return locationData == null || (
        locationData is map &&
        locationData.keys().hasAll(['coordinates']) &&
        isValidCoordinates(locationData.coordinates) &&
        // Address is optional in location data
        (!locationData.keys().hasAny(['address']) || isValidAddress(locationData.address))
      );
    }
    
    // GPS coordinates validation
    function isValidCoordinates(coords) {
      return coords is map &&
             coords.keys().hasAll(['latitude', 'longitude', 'accuracy']) &&
             coords.latitude is number &&
             coords.longitude is number &&
             coords.accuracy is number &&
             coords.latitude >= -90 && coords.latitude <= 90 &&
             coords.longitude >= -180 && coords.longitude <= 180 &&
             coords.accuracy >= 0;
    }
    
    // Address validation function
    function isValidAddress(address) {
      return address is map &&
             address.keys().hasAll(['type']) &&
             address.type is string &&
             address.type in ['formal', 'landmark', 'description'] &&
             address.keys().hasAll(['displayText']) &&
             address.displayText is string;
    }

    match /couriers/{userId} {
      allow read: if isAuthenticated(); // Pharmacies can read courier profiles
      allow create: if isOwner(userId) && isValidCourierData(request.resource.data);
      allow update: if isOwner(userId) && isValidCourierData(request.resource.data);
      allow delete: if isOwner(userId);
    }
    
    // Courier data validation function
    function isValidCourierData(data) {
      return data.keys().hasAll(['email', 'fullName', 'phoneNumber', 'vehicleType', 'licensePlate', 'role']) &&
             data.role == 'courier' &&
             data.email is string &&
             data.fullName is string &&
             data.phoneNumber is string &&
             data.vehicleType is string &&
             data.licensePlate is string &&
             data.isActive is bool &&
             // Optional fields validation
             (!data.keys().hasAny(['hasActiveSubscription']) || data.hasActiveSubscription is bool) &&
             (!data.keys().hasAny(['subscriptionStatus']) || data.subscriptionStatus is string) &&
             (!data.keys().hasAny(['operatingCity']) || data.operatingCity is string);
    }
    
    // ðŸ”’ SUBSCRIPTION SECURITY RULES
    match /subscriptions/{id} {
      allow read: if isAuthenticated() && (
        resource.data.pharmacyId == request.auth.uid ||  // Pharmacy can read own subscription
        isSuperAdmin(request.auth.uid)                   // Admin can read all
      );
      allow create: if isAuthenticated() && request.resource.data.pharmacyId == request.auth.uid;
      allow update: if isSuperAdmin(request.auth.uid);   // Only admin can approve/suspend
      allow delete: if false; // Subscriptions should not be deleted, only cancelled
    }
    
    match /subscription_payments/{id} {
      allow read: if isAuthenticated() && (
        resource.data.pharmacyId == request.auth.uid ||  // Pharmacy can read own payments
        isSuperAdmin(request.auth.uid)                   // Admin can read all
      );
      allow create: if isAuthenticated() && request.resource.data.pharmacyId == request.auth.uid;
      allow update: if isSuperAdmin(request.auth.uid);   // Only admin can verify payments
      allow delete: if false; // Payment records should not be deleted
    }

    match /pharmacy_inventory/{id} {
      allow read: if isAuthenticated(); // All authenticated users can read inventory (for browsing)
      // ðŸ”’ CRITICAL: Inventory creation requires active subscription
      allow create: if isAuthenticated() && 
                   request.resource.data.pharmacyId == request.auth.uid &&
                   hasActiveSubscription(request.auth.uid);
      // ðŸ”’ CRITICAL: Only subscription holders can update/delete inventory
      allow update, delete: if isAuthenticated() && 
                           resource.data.pharmacyId == request.auth.uid &&
                           hasActiveSubscription(request.auth.uid);
    }

    match /exchange_proposals/{id} {
      allow read: if isAuthenticated(); // All authenticated users can read proposals
      // ðŸ”’ CRITICAL: Creating proposals requires active subscription
      allow create: if isAuthenticated() && hasActiveSubscription(request.auth.uid);
      // ðŸ”’ CRITICAL: Updating proposals requires active subscription for both parties
      allow update: if isAuthenticated() && (
        (resource.data.proposingPharmacyId == request.auth.uid && hasActiveSubscription(request.auth.uid)) || 
        (resource.data.receivingPharmacyId == request.auth.uid && hasActiveSubscription(request.auth.uid))
      );
      // ðŸ”’ CRITICAL: Deleting proposals requires active subscription
      allow delete: if isAuthenticated() && 
                   resource.data.proposingPharmacyId == request.auth.uid &&
                   hasActiveSubscription(request.auth.uid);
    }

    match /deliveries/{id} {
      allow read: if isAuthenticated() && (
        resource.data.status == 'pending' ||                     // âœ… FIX: Couriers can read pending deliveries
        resource.data.courierId == request.auth.uid ||           // Courier can read assigned deliveries
        resource.data.fromPharmacyId == request.auth.uid ||      // Source pharmacy can read
        resource.data.toPharmacyId == request.auth.uid ||        // Destination pharmacy can read
        isSuperAdmin(request.auth.uid)                           // Super admin can read all
      );
      allow create: if isAuthenticated() && isSuperAdmin(request.auth.uid); // Only admins create deliveries
      allow update: if isAuthenticated() && (
        resource.data.courierId == request.auth.uid ||           // Courier can update status/location
        resource.data.fromPharmacyId == request.auth.uid ||      // Source pharmacy can update
        resource.data.toPharmacyId == request.auth.uid ||        // Destination pharmacy can update
        isSuperAdmin(request.auth.uid)                           // Super admin can update all
      );
    }

    // Delivery issue reporting
    match /delivery_issues/{id} {
      allow read: if isAuthenticated() && (
        resource.data.courierId == request.auth.uid ||           // Courier can read own issues
        isSuperAdmin(request.auth.uid)                           // Super admin can read all
      );
      allow create: if isAuthenticated();                        // Any authenticated user can report issues
      allow update: if isAuthenticated() && isSuperAdmin(request.auth.uid); // Only admin can resolve issues
    }

    match /medicines/{id} {
      allow read: if isAuthenticated(); // All users can read medicine database
      allow create: if isAuthenticated(); // Pharmacies can create custom medicines
      allow update: if isAuthenticated(); // Allow updates to medicine info
    }
  }
}
